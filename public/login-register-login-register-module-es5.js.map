{"version":3,"sources":["webpack:///src/app/login-register/login-register-routing.module.ts","webpack:///src/app/login-register/login-register.module.ts","webpack:///src/app/login-register/login/login.component.ts","webpack:///src/app/login-register/login/login.component.html"],"names":["routes","path","component","LoginRegisterRoutingModule","forChild","imports","exports","LoginRegisterModule","declarations","LoginComponent","authService","emailPattern","passwordPattern","signinupform","controls","email","required","pattern","password","type","disableFlag","signinupFormValues","markAllAsTouched","invalid","SignIn","value","toString","SignUp","signInUpMethod","selector","templateUrl","styleUrls"],"mappings":"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","file":"login-register-login-register-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: LoginComponent }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class LoginRegisterRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { LoginRegisterRoutingModule } from './login-register-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LoginRegisterRoutingModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ]\r\n})\r\nexport class LoginRegisterModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n  signinupform: FormGroup;\r\n  emailPattern = '^[a-zA-Z0-9.!#$%&*+/=?^_{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$';\r\n  passwordPattern = '^(?=.*[0-9])(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{6,16}$';\r\n\r\n  constructor(\r\n    public authService: AuthService\r\n  ) { }\r\n\r\n  get signinupFormValues() {\r\n    return this.signinupform.controls;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.signinupform = new FormGroup({\r\n      email: new FormControl('', [Validators.required, Validators.pattern(this.emailPattern)]),\r\n      password: new FormControl('', [Validators.required, Validators.pattern(this.passwordPattern)])\r\n    });\r\n  }\r\n\r\n  signInUpMethod(type: string) {\r\n    this.authService.disableFlag = true;\r\n    this.signinupFormValues.email.markAllAsTouched();\r\n    this.signinupFormValues.password.markAllAsTouched();\r\n    if (!this.signinupFormValues.email.invalid && !this.signinupFormValues.password.invalid) {\r\n      if (type === 'SIGNIN') {\r\n        this.authService.SignIn(\r\n          this.signinupFormValues.email.value.toString(),\r\n          this.signinupFormValues.password.value.toString()\r\n        );\r\n      } else {\r\n        this.authService.SignUp(\r\n          this.signinupFormValues.email.value.toString(),\r\n          this.signinupFormValues.password.value.toString()\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"form-signin text-center\">\r\n        <form [formGroup]=\"signinupform\">\r\n            <img class=\"mb-2\" style=\"margin-top: 65px;\" src=\"../../../assets/team_icon.png\" alt=\"\" width=\"150\">\r\n            <h1 class=\"h3 mb-3 fw-normal\">The_Atlantians</h1>\r\n\r\n            <p class=\"fw-bold\">Sign in/up</p>\r\n      \r\n            <div class=\"form-floating\">\r\n                <input type=\"email\" class=\"form-control\" id=\"email\" formControlName=\"email\"\r\n                    [ngClass]=\"{'invalid-class': signinupFormValues.email.errors && signinupFormValues.email.touched}\"\r\n                    placeholder=\"name@example.com\">\r\n                <label for=\"floatingInput\">Email address</label>\r\n            </div>\r\n            <div *ngIf=\"signinupFormValues.email.errors && signinupFormValues.email.touched\" \r\n                class=\"invalid-field\">\r\n                <div *ngIf=\"signinupFormValues.email.errors.required\">\r\n                    Email address is required.\r\n                </div>\r\n                <div *ngIf=\"signinupFormValues.email.errors.pattern\">\r\n                    Email address is invalid.\r\n                </div>\r\n            </div>\r\n            <div class=\"form-floating\">\r\n                <input type=\"password\" class=\"form-control\" id=\"password\" formControlName=\"password\"\r\n                    [ngClass]=\"{'invalid-class': signinupFormValues.password.errors && signinupFormValues.password.touched}\"\r\n                    placeholder=\"Password\">\r\n                <label for=\"floatingPassword\">Password</label>\r\n            </div>\r\n            <div *ngIf=\"signinupFormValues.password.errors && signinupFormValues.password.touched\" \r\n                class=\"invalid-field\">\r\n                <div *ngIf=\"signinupFormValues.password.errors.required\">\r\n                    Password is required.\r\n                </div>\r\n                <div *ngIf=\"signinupFormValues.password.errors.pattern\">\r\n                    Password should match contain at least one capital letter, one number and one special character.\r\n                </div>\r\n            </div>\r\n            <br>\r\n            <button class=\"w-100 btn btn-primary\" [disabled]=\"authService.disableFlag\" (click)=\"signInUpMethod('SIGNIN')\">Sign in</button>\r\n            <hr>\r\n            <button class=\"w-100 btn btn-primary\" [disabled]=\"authService.disableFlag\" (click)=\"signInUpMethod('SIGNUP')\">Sign up</button>\r\n        </form>\r\n        <p class=\"mt-3 text-muted\">Socials</p>\r\n        <div class=\"btn-group\">\r\n            <a class=\"icon-button facebook\"><i class=\"fa fa-facebook\"></i><span></span></a>\r\n            <a class=\"icon-button twitter\"><i class=\"fa fa-twitter\"></i><span></span></a>\r\n            <a class=\"icon-button google\" (click)=\"authService.GoogleAuth()\"><i class=\"fa fa-google\"></i><span></span></a>\r\n            <a class=\"icon-button linkedin\"><i class=\"fa fa-linkedin\"></i><span></span></a>\r\n            <a class=\"icon-button instagram\"><i class=\"fa fa-instagram\"></i><span></span></a>\r\n        </div>\r\n        <p class=\"mt-2 mb-3 text-muted\">© 2021</p>\r\n    </div>\r\n</div>\r\n"]}